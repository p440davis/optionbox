{"version":3,"file":"optionbox.0.1.0.min.js","sources":["../src/core/persist.js","../src/core/update.js","../src/core/load.js","../src/optionbox.js","../src/core/setup.js"],"sourcesContent":["const persist = {\n  storageExists: typeof Storage !== \"undefined\" ? true : false,\n\n  key(name) {\n    return \"_optionbox-\" + name;\n  },\n\n  store(name, value) {\n    if (this.storageExists) {\n      sessionStorage.setItem(this.key(name), value);\n    }\n  },\n\n  remove(name) {\n    if (this.storageExists) {\n      sessionStorage.removeItem(this.key(name));\n    }\n  },\n\n  get(name) {\n    if (this.storageExists) {\n      return sessionStorage.getItem(this.key(name));\n    }\n  }\n};\n\nexport { persist };\n","import { persist } from \"./persist.js\";\n\nconst update = {\n  listen(radios, persistable) {\n    [].forEach.call(radios, radio => {\n      radio.onclick = () => {\n        this.change(radio, persistable);\n      };\n    });\n  },\n\n  change(radio, persistable) {\n    let name = radio.dataset.optionboxName;\n    let value = radio.dataset.optionboxValue;\n    let optionItem = radio.closest(\"._optionbox-item\");\n    let optionBox = radio.closest(\"._optionbox\");\n    let optionSiblings = optionBox.querySelectorAll(\n      \"._optionbox-radio:not(:checked)\"\n    );\n\n    let select = document.querySelector(`[name=${name}]`);\n\n    if (select.value != value) {\n      // select if not previously selected\n      select.value = value;\n      radio.checked = true;\n      if (persistable) {\n        persist.store(select.name, select.value);\n      }\n      this.close(optionItem, optionBox, optionSiblings);\n    } else {\n      // deselect if previously selected\n      select.selectedIndex = -1;\n      radio.checked = false;\n      persist.remove(select.name);\n      this.open(optionItem, optionBox);\n    }\n  },\n\n  close(optionItem, optionBox, optionSiblings) {\n    optionItem.classList.add(\"selected\");\n    optionBox.classList.add(\"closed\");\n    [].forEach.call(optionSiblings, sibling =>\n      sibling.closest(\"label\").classList.remove(\"selected\")\n    );\n  },\n\n  open(optionItem, optionBox) {\n    optionItem.classList.remove(\"selected\");\n    optionBox.classList.remove(\"closed\");\n  }\n};\n\nexport { update };\n","import { update } from \"./update.js\";\nimport { persist } from \"./persist.js\";\n\nconst load = {\n  init(settings) {\n    let elements = settings.select\n      ? document.querySelectorAll(settings.select)\n      : document.querySelectorAll(\"select\");\n    let selects = [];\n\n    if (elements.length) {\n      [].forEach.call(elements, element => {\n        if (element.tagName == \"SELECT\") {\n          selects.push(element);\n        } else\n          console.warn(\n            \"Optionbox warning: Your selection includes a <\" +\n              element.tagName.toLowerCase() +\n              \">. Only <select> elements can be converted to an optionbox\"\n          );\n      });\n\n      this.create(selects);\n      update.listen(\n        document.querySelectorAll(\"._optionbox-radio\"),\n        settings.persist\n      );\n      this.clickAllSelected();\n    }\n  },\n\n  create(selects) {\n    selects.forEach(select => {\n      let optionsBox = document.createElement(\"span\");\n      let storedValue = persist.get(select.name);\n\n      optionsBox.classList.add(\"_optionbox\");\n      optionsBox.innerHTML = this.replicate(\n        select.querySelectorAll(\"option\"),\n        select.name,\n        storedValue\n      );\n\n      select.insertAdjacentElement(\"beforebegin\", optionsBox);\n\n      select.selectedIndex = -1;\n      select.hidden = true;\n    });\n  },\n\n  replicate(options, name, storedValue) {\n    let content = \"\";\n\n    [].forEach.call(options, option => {\n      let selected = false;\n      if (storedValue === option.value) {\n        selected = true;\n      } else if (!storedValue && option.hasAttribute(\"selected\")) {\n        selected = true;\n      }\n\n      content += `\n                <label class=\"_optionbox-item\">\n                <input\n                    type=\"radio\"\n                    class=\"_optionbox-radio\"\n                    name=\"${name}-options\"\n                    data-optionbox-name=\"${name}\"\n                    data-optionbox-value=\"${option.value}\"\n                    checked=\"${selected}\">\n                ${option.innerHTML}\n                </label>`;\n    });\n\n    return content;\n  },\n\n  clickAllSelected() {\n    let checked = document.querySelectorAll(\"._optionbox-radio[checked=true]\");\n\n    [].forEach.call(checked, radio => {\n      radio.click();\n    });\n  }\n};\n\nexport { load };\n","import { load } from \"./core/load.js\";\nimport { setup } from \"./core/setup.js\";\n\nwindow.optionbox = (userSettings) => {\n    let settings = setup(userSettings);\n    load.init(settings);\n};","const setup = settings => {\n    // defaults\n    let selector = \"select\";\n    let persistable = true;\n\n    // props provided\n    if (settings) {\n        if (settings.select !== undefined) {\n            selector = settings.select;\n        }\n        if (settings.persist !== undefined) {\n            persistable = settings.persist;\n        }\n    }\n\n    return {\n        select: selector,\n        persist: persistable\n    };\n};\n\nexport { setup };"],"names":["persist","Storage","name","value","this","storageExists","setItem","key","removeItem","sessionStorage","getItem","update","radios","persistable","forEach","call","onclick","change","radio","dataset","optionboxName","optionboxValue","optionItem","closest","optionBox","optionSiblings","querySelectorAll","select","document","querySelector","checked","store","close","selectedIndex","remove","open","classList","add","sibling","load","settings","elements","selects","length","element","tagName","push","console","warn","toLowerCase","create","listen","clickAllSelected","optionsBox","createElement","storedValue","get","innerHTML","_this","replicate","insertAdjacentElement","hidden","options","content","selected","option","hasAttribute","click","window","optionbox","userSettings","selector","undefined","init"],"mappings":"yBAAA,IAAMA,EAAU,eACoB,oBAAZC,qBAElBC,SACK,cAAgBA,kBAGnBA,EAAMC,GACNC,KAAKC,8BACQC,QAAQF,KAAKG,IAAIL,GAAOC,oBAIpCD,GACDE,KAAKC,8BACQG,WAAWJ,KAAKG,IAAIL,kBAInCA,MACEE,KAAKC,qBACAI,eAAeC,QAAQN,KAAKG,IAAIL,MCnBvCS,EAAS,iBACNC,EAAQC,iBACVC,QAAQC,KAAKH,EAAQ,cAChBI,QAAU,aACTC,OAAOC,EAAOL,uBAKlBK,EAAOL,OACRX,EAAOgB,EAAMC,QAAQC,cACrBjB,EAAQe,EAAMC,QAAQE,eACtBC,EAAaJ,EAAMK,QAAQ,oBAC3BC,EAAYN,EAAMK,QAAQ,eAC1BE,EAAiBD,EAAUE,iBAC7B,mCAGEC,EAASC,SAASC,uBAAuB3B,OAEzCyB,EAAOxB,OAASA,KAEXA,MAAQA,IACT2B,SAAU,EACZjB,KACMkB,MAAMJ,EAAOzB,KAAMyB,EAAOxB,YAE/B6B,MAAMV,EAAYE,EAAWC,OAG3BQ,eAAiB,IAClBH,SAAU,IACRI,OAAOP,EAAOzB,WACjBiC,KAAKb,EAAYE,oBAIpBF,EAAYE,EAAWC,KAChBW,UAAUC,IAAI,cACfD,UAAUC,IAAI,aACrBvB,QAAQC,KAAKU,EAAgB,mBAC9Ba,EAAQf,QAAQ,SAASa,UAAUF,OAAO,6BAIzCZ,EAAYE,KACJY,UAAUF,OAAO,cAClBE,UAAUF,OAAO,YC9CzBK,EAAO,eACNC,OACCC,EAAWD,EAASb,OACpBC,SAASF,iBAAiBc,EAASb,QACnCC,SAASF,iBAAiB,UAC1BgB,EAAU,GAEVD,EAASE,YACR7B,QAAQC,KAAK0B,EAAU,YACD,UAAnBG,EAAQC,UACFC,KAAKF,GAEbG,QAAQC,KACN,iDACEJ,EAAQC,QAAQI,cAChB,qEAIHC,OAAOR,KACLS,OACLvB,SAASF,iBAAiB,qBAC1Bc,EAASxC,cAENoD,qCAIFV,gBACG5B,QAAQ,gBACVuC,EAAazB,SAAS0B,cAAc,QACpCC,EAAcvD,EAAQwD,IAAI7B,EAAOzB,QAE1BkC,UAAUC,IAAI,gBACdoB,UAAYC,EAAKC,UAC1BhC,EAAOD,iBAAiB,UACxBC,EAAOzB,KACPqD,KAGKK,sBAAsB,cAAeP,KAErCpB,eAAiB,IACjB4B,QAAS,wBAIVC,EAAS5D,EAAMqD,OACnBQ,EAAU,YAEXjD,QAAQC,KAAK+C,EAAS,gBACnBE,GAAW,EACXT,IAAgBU,EAAO9D,SACd,GACDoD,GAAeU,EAAOC,aAAa,iBAClC,8LAQShE,yDACeA,kDACC+D,EAAO9D,yCACpB6D,yBACbC,EAAOR,yCAIdM,mCAIHjC,EAAUF,SAASF,iBAAiB,sCAErCZ,QAAQC,KAAKe,EAAS,cACjBqC,YC9EZC,OAAOC,UAAY,SAACC,SCDZC,EACA1D,EDCA2B,GCFA+B,EAAW,SACX1D,GAAc,KDCGyD,UCGOE,IAApBhC,EAASb,WACEa,EAASb,aAEC6C,IAArBhC,EAASxC,YACKwC,EAASxC,UAIxB,QACKuE,UACC1D,MDZR4D,KAAKjC"}