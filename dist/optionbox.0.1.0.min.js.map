{"version":3,"file":"optionbox.0.1.0.min.js","sources":["../src/_get.js","../src/_create.js","../src/_update.js","../src/optionbox.js"],"sourcesContent":["const get = {\r\n    defaultConfig: {\r\n        persist: window.location.pathname,\r\n        prefix: \"optionbox-\",\r\n        select: \"select:not([multiple])\"\r\n    },\r\n\r\n    config(userConfig) {\r\n        let config = Object.assign(this.defaultConfig, userConfig);\r\n\r\n        if (!this.storageExists()) {\r\n            config.persist = false;\r\n        }\r\n\r\n        return config;\r\n    },\r\n\r\n    storageExists() {\r\n        if (typeof Storage !== undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    selectElements(selector) {\r\n        let elements = document.querySelectorAll(selector);\r\n        let selects = [];\r\n\r\n        if (elements.length) {\r\n            [].forEach.call(elements, element => {\r\n                if (element.tagName === \"SELECT\") {\r\n                    selects.push(element);\r\n                } else\r\n                    console.warn(\r\n                        \"Optionbox warning: Your selection includes a <\" +\r\n                        element.tagName.toLowerCase() +\r\n                        \">. Only <select> elements can be converted to an optionbox\"\r\n                    );\r\n            });\r\n        }\r\n\r\n        return selects;\r\n    }\r\n};\r\n\r\nexport { get };","const create = {\r\n    optionboxes(config, selectElements) {\r\n        let optionboxElements = [];\r\n\r\n        selectElements.forEach(select => {\r\n            let prefix = config.prefix;\r\n            let name = select.name;\r\n            let classes = select.getAttribute(\"class\");\r\n            let styles = select.getAttribute(\"style\");\r\n            let storedValue = \"\";\r\n            let optgroupElements = select.querySelectorAll(\"optgroup\");\r\n            let optionElements = select.querySelectorAll(\"option\");\r\n            let optionbox = document.createElement(\"span\");\r\n\r\n            if (config.persist) {\r\n                storedValue = sessionStorage[config.persist + \">\" + select.name];\r\n            }\r\n\r\n            optionbox.id = prefix + name;\r\n            classes != null && optionbox.setAttribute(\"class\", classes);\r\n            optionbox.classList.add(prefix);\r\n            styles != null && optionbox.setAttribute(\"style\", styles);\r\n\r\n            optionbox.innerHTML = `<div class=${prefix}container>`;\r\n\r\n            if (optgroupElements.length) {\r\n                optionbox.innerHTML += this.optgroups(optgroupElements, name, storedValue, prefix);\r\n            } else {\r\n                optionbox.innerHTML += this.options(optionElements, name, storedValue, prefix);\r\n            }\r\n\r\n            optionbox.innerHTML += \"</div>\";\r\n\r\n            select.insertAdjacentElement(\"beforebegin\", optionbox);\r\n\r\n            select.selectedIndex = -1;\r\n            select.remove();\r\n\r\n            optionboxElements.push(optionbox);\r\n        });\r\n\r\n        return (optionboxElements);\r\n    },\r\n\r\n    optgroups(optgroupElements, name, storedValue, prefix) {\r\n        let content = \"\";\r\n\r\n        [].forEach.call(optgroupElements, optgroup => {\r\n            let label = optgroup.getAttribute(\"label\");\r\n            let classes = optgroup.getAttribute(\"class\");\r\n            let styles = optgroup.getAttribute(\"style\");\r\n            let optionElements = optgroup.querySelectorAll(\"option\");\r\n\r\n            content += `<div \r\n                class=\"${prefix}group ${classes != null ? classes : \"\"}\"\r\n                style=\"${styles != null ? styles : \"\"}\">`;\r\n\r\n            if (label) content += `<small class=\"${prefix}group-label\">${label}</small>`;\r\n\r\n            content += this.options(optionElements, name, storedValue, prefix);\r\n\r\n            content += \"</div>\";\r\n        });\r\n\r\n        return content;\r\n    },\r\n\r\n    options(optionElements, name, storedValue, prefix) {\r\n        let content = \"\";\r\n\r\n        [].forEach.call(optionElements, option => {\r\n            let value = option.value;\r\n            let label = option.innerHTML;\r\n            let alt = option.getAttribute(\"alt\");\r\n            let classes = option.getAttribute(\"class\");\r\n            let styles = option.getAttribute(\"style\");\r\n            let selected = this.preselected(storedValue, option);\r\n\r\n            content += `\r\n                    <label \r\n                        class=\"${prefix}item ${classes != null ? classes : \"\"}\"\r\n                        style=\"${styles != null ? styles : \"\"}\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        class=\"${prefix}radio\"\r\n                        name=\"${name}\"\r\n                        value=\"${value}\"\r\n                        checked=\"${selected}\">\r\n                        ${label}`;\r\n\r\n            if (alt) {\r\n                content += `<small class=\"${prefix}alt\">${alt}</small>`;\r\n            }\r\n\r\n            content += \"</label>\";\r\n        });\r\n\r\n        return content;\r\n    },\r\n\r\n    preselected(storedValue, option) {\r\n        if (storedValue === option.value) {\r\n            return true;\r\n        } else if (!storedValue && option.hasAttribute(\"selected\")) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n};\r\n\r\nexport { create };","const update = {\r\n    listen(config, optionboxes) {\r\n        optionboxes.forEach(optionbox => {\r\n            optionbox.addEventListener(\"click\", e => { // Delegated event listener avoids performance issues of listeneing to every option\r\n                if (e.target && e.target.tagName === \"INPUT\") {\r\n                    this.change(e.target, config);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    change(radio, config) {\r\n        let prefix = config.prefix;\r\n        let name = radio.name;\r\n        let key = config.persist + \">\" + name;\r\n        let value = radio.value;\r\n        let optionItem = radio.closest(\"label\");\r\n        let optionbox = radio.closest(\".\" + prefix);\r\n\r\n        if (optionItem.classList.contains(\"selected\")) {\r\n            radio.checked = false;\r\n            this.remove(config, key);\r\n            this.open(optionItem, optionbox);\r\n        } else {\r\n            radio.checked = true;\r\n            this.store(config, key, value);\r\n            this.close(optionItem, optionbox);\r\n        }\r\n    },\r\n\r\n    close(optionItem, optionbox) {\r\n        let optionSiblings = optionbox.querySelectorAll(\r\n            \"._optionbox-radio:not(:checked)\"\r\n        );\r\n\r\n        optionItem.classList.add(\"selected\");\r\n        optionbox.classList.add(\"closed\");\r\n        [].forEach.call(optionSiblings, sibling =>\r\n            sibling.closest(\"label\").classList.remove(\"selected\")\r\n        );\r\n    },\r\n\r\n    open(optionItem, optionbox) {\r\n        optionItem.classList.remove(\"selected\");\r\n        optionbox.classList.remove(\"closed\");\r\n    },\r\n\r\n    init(optionboxes) {\r\n        optionboxes.forEach(optionbox => {\r\n            let preselects = optionbox.querySelectorAll(\"[checked=true]\");\r\n\r\n            [].forEach.call(preselects, preselect => {\r\n                preselect.click();\r\n            });\r\n        });\r\n    },\r\n\r\n    store(config, key, value) {\r\n        if (config.persist) {\r\n            sessionStorage[key] = value;\r\n        }\r\n    },\r\n\r\n    remove(config, key) {\r\n        if (config.persist) {\r\n            delete sessionStorage[key];\r\n        }\r\n    }\r\n};\r\n\r\nexport { update };\r\n","import { get } from \"./_get.js\";\r\nimport { create } from \"./_create.js\";\r\nimport { update } from \"./_update.js\";\r\n\r\nwindow.optionbox = (userConfig) => {\r\n    let config = get.config(userConfig);\r\n    let selectElements = get.selectElements(config.select);\r\n\r\n    let optionboxes = create.optionboxes(config, selectElements);\r\n\r\n    update.listen(config, optionboxes);\r\n    update.init(optionboxes);\r\n};"],"names":["get","window","location","pathname","userConfig","config","Object","assign","this","defaultConfig","storageExists","persist","undefined","Storage","selector","elements","document","querySelectorAll","selects","length","forEach","call","element","tagName","push","console","warn","toLowerCase","create","selectElements","optionboxElements","prefix","name","select","classes","getAttribute","styles","storedValue","optgroupElements","optionElements","optionbox","createElement","sessionStorage","id","setAttribute","classList","add","innerHTML","_this","optgroups","options","insertAdjacentElement","selectedIndex","remove","content","label","optgroup","_this2","value","option","alt","selected","_this3","preselected","hasAttribute","update","optionboxes","addEventListener","e","target","change","radio","key","optionItem","closest","contains","checked","open","store","close","optionSiblings","sibling","preselects","click","listen","init"],"mappings":"yOAAMA,EAAM,eACO,SACFC,OAAOC,SAASC,gBACjB,oBACA,0CAGLC,OACCC,EAASC,OAAOC,OAAOC,KAAKC,cAAeL,UAE1CI,KAAKE,oBACCC,SAAU,GAGdN,wCAIgBO,yBAAZC,sBAAAA,mCAOAC,OACPC,EAAWC,SAASC,iBAAiBH,GACrCI,EAAU,UAEVH,EAASI,WACNC,QAAQC,KAAKN,EAAU,YACE,WAApBO,EAAQC,UACAC,KAAKF,GAEbG,QAAQC,KACJ,iDACAJ,EAAQC,QAAQI,cAChB,gEAKTT,IC1CTU,EAAS,sBACCvB,EAAQwB,cACZC,EAAoB,YAETV,QAAQ,gBACfW,EAAS1B,EAAO0B,OAChBC,EAAOC,EAAOD,KACdE,EAAUD,EAAOE,aAAa,SAC9BC,EAASH,EAAOE,aAAa,SAC7BE,EAAc,GACdC,EAAmBL,EAAOhB,iBAAiB,YAC3CsB,EAAiBN,EAAOhB,iBAAiB,UACzCuB,EAAYxB,SAASyB,cAAc,QAEnCpC,EAAOM,YACO+B,eAAerC,EAAOM,QAAU,IAAMsB,EAAOD,SAGrDW,GAAKZ,EAASC,EACb,SAAQQ,EAAUI,aAAa,QAASV,KACzCW,UAAUC,IAAIf,GACd,SAAQS,EAAUI,aAAa,QAASR,KAExCW,wBAA0BhB,eAEhCO,EAAiBnB,SACP4B,WAAaC,EAAKC,UAAUX,EAAkBN,EAAMK,EAAaN,KAEjEgB,WAAaC,EAAKE,QAAQX,EAAgBP,EAAMK,EAAaN,KAGjEgB,WAAa,WAEhBI,sBAAsB,cAAeX,KAErCY,eAAiB,IACjBC,WAEW7B,KAAKgB,KAGnBV,sBAGFQ,EAAkBN,EAAMK,EAAaN,cACvCuB,EAAU,YAEXlC,QAAQC,KAAKiB,EAAkB,gBAC1BiB,EAAQC,EAASrB,aAAa,SAC9BD,EAAUsB,EAASrB,aAAa,SAChCC,EAASoB,EAASrB,aAAa,SAC/BI,EAAiBiB,EAASvC,iBAAiB,8CAGlCc,YAA0B,MAAXG,EAAkBA,EAAU,kCACjC,MAAVE,EAAiBA,EAAS,SAEnCmB,IAAOD,oBAA4BvB,kBAAsBwB,iBAElDE,EAAKP,QAAQX,EAAgBP,EAAMK,EAAaN,MAEhD,WAGRuB,oBAGHf,EAAgBP,EAAMK,EAAaN,cACnCuB,EAAU,YAEXlC,QAAQC,KAAKkB,EAAgB,gBACxBmB,EAAQC,EAAOD,MACfH,EAAQI,EAAOZ,UACfa,EAAMD,EAAOxB,aAAa,OAC1BD,EAAUyB,EAAOxB,aAAa,SAC9BC,EAASuB,EAAOxB,aAAa,SAC7B0B,EAAWC,EAAKC,YAAY1B,EAAasB,uEAIxB5B,WAAyB,MAAXG,EAAkBA,EAAU,0CAChC,MAAVE,EAAiBA,EAAS,4GAG1BL,2CACDC,uCACC0B,yCACEG,iCACTN,EAEVK,wBAC4B7B,UAAc6B,iBAGnC,aAGRN,wBAGCjB,EAAasB,UACjBtB,IAAgBsB,EAAOD,SAEfrB,IAAesB,EAAOK,aAAa,eCvGjDC,EAAS,iBACJ5D,EAAQ6D,gBACC9C,QAAQ,cACN+C,iBAAiB,QAAS,YAC5BC,EAAEC,QAA+B,UAArBD,EAAEC,OAAO9C,WAChB+C,OAAOF,EAAEC,OAAQhE,wBAM/BkE,EAAOlE,OACN0B,EAAS1B,EAAO0B,OAChBC,EAAOuC,EAAMvC,KACbwC,EAAMnE,EAAOM,QAAU,IAAMqB,EAC7B0B,EAAQa,EAAMb,MACde,EAAaF,EAAMG,QAAQ,SAC3BlC,EAAY+B,EAAMG,QAAQ,IAAM3C,GAEhC0C,EAAW5B,UAAU8B,SAAS,eACxBC,SAAU,OACXvB,OAAOhD,EAAQmE,QACfK,KAAKJ,EAAYjC,OAEhBoC,SAAU,OACXE,MAAMzE,EAAQmE,EAAKd,QACnBqB,MAAMN,EAAYjC,oBAIzBiC,EAAYjC,OACVwC,EAAiBxC,EAAUvB,iBAC3B,qCAGO4B,UAAUC,IAAI,cACfD,UAAUC,IAAI,aACrB1B,QAAQC,KAAK2D,EAAgB,mBAC5BC,EAAQP,QAAQ,SAAS7B,UAAUQ,OAAO,6BAI7CoB,EAAYjC,KACFK,UAAUQ,OAAO,cAClBR,UAAUQ,OAAO,yBAG1Ba,KACW9C,QAAQ,gBACZ8D,EAAa1C,EAAUvB,iBAAiB,qBAEzCG,QAAQC,KAAK6D,EAAY,cACdC,4BAKhB9E,EAAQmE,EAAKd,GACXrD,EAAOM,yBACQ6D,GAAOd,oBAIvBrD,EAAQmE,GACPnE,EAAOM,gBACA+B,eAAe8B,KC7DlCvE,OAAOuC,UAAY,SAACpC,OACZC,EAASL,EAAIK,OAAOD,GACpByB,EAAiB7B,EAAI6B,eAAexB,EAAO4B,QAE3CiC,EAActC,EAAOsC,YAAY7D,EAAQwB,KAEtCuD,OAAO/E,EAAQ6D,KACfmB,KAAKnB"}