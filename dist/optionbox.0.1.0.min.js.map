{"version":3,"file":"optionbox.0.1.0.min.js","sources":["../src/core/get.js","../src/core/create.js","../src/optionbox.js"],"sourcesContent":["const get = {\r\n    config(userConfig) {\r\n        const defaultConfig = {\r\n            persist: true,\r\n            select: \"select\"\r\n        };\r\n\r\n        let mergedConfig = Object.assign(defaultConfig, userConfig);\r\n\r\n        return mergedConfig;\r\n    },\r\n\r\n    storageExists() {\r\n        if (typeof Storage !== undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    storedValues(storageExists, persist, prefix) {\r\n        if (storageExists && persist) {\r\n            return sessionStorage.getItem(prefix);\r\n        }\r\n\r\n        return {};\r\n    },\r\n\r\n    selectElements(selector) {\r\n        let elements = document.querySelectorAll(selector);\r\n        let selects = [];\r\n\r\n        if (elements.length) {\r\n            [].forEach.call(elements, element => {\r\n                if (element.tagName === \"SELECT\") {\r\n                    selects.push(element);\r\n                } else\r\n                    console.warn(\r\n                        \"Optionbox warning: Your selection includes a <\" +\r\n                        element.tagName.toLowerCase() +\r\n                        \">. Only <select> elements can be converted to an optionbox\"\r\n                    );\r\n            });\r\n        }\r\n\r\n        return selects;\r\n    }\r\n};\r\n\r\nexport { get };","const create = {\r\n    optionboxes(selectElements, storedValues, prefix) {\r\n        let optionboxElements = [];\r\n\r\n        selectElements.forEach(select => {\r\n            let optionbox = document.createElement(\"span\");\r\n            let name = select.name;\r\n            let storedValue = \"\";\r\n\r\n            if (storedValues) {\r\n                storedValue = storedValues[name];\r\n            }\r\n\r\n            optionbox.id = name + prefix;\r\n            optionbox.classList.add(prefix);\r\n            optionbox.innerHTML = this.options(select.querySelectorAll(\"option\"), name, storedValue, prefix);\r\n            select.insertAdjacentElement(\"beforebegin\", optionbox);\r\n            select.selectedIndex = -1;\r\n            select.hidden = true;\r\n\r\n            optionboxElements.push(optionbox);\r\n        });\r\n\r\n        return (optionboxElements);\r\n    },\r\n\r\n    options(optionElements, name, storedValue, prefix) {\r\n        let content = \"\";\r\n\r\n        [].forEach.call(optionElements, option => {\r\n            let selected = this.preselected(storedValue, option);\r\n            let alt = option.getAttribute(\"alt\");\r\n\r\n            content += `\r\n                    <label class=\"${prefix}-item\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        class=\"${prefix}-radio\"\r\n                        name=\"${name + prefix}\"\r\n                        value=\"${option.value + prefix}\"\r\n                        checked=\"${selected}\">\r\n                        ${option.innerHTML}`;\r\n\r\n            if (alt) {\r\n                content += `<small class=\"${prefix}-alt\">${alt}</small>`;\r\n            }\r\n\r\n            content += \"</label>\";\r\n        });\r\n\r\n        return content;\r\n    },\r\n\r\n    preselected(storedValue, option) {\r\n        if (storedValue === option.value) {\r\n            return true;\r\n        } else if (!storedValue && option.hasAttribute(\"selected\")) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n};\r\n\r\nexport { create };","import { get } from \"./core/get.js\";\r\nimport { create } from \"./core/create.js\";\r\n\r\nwindow.optionbox = (userConfig) => {\r\n    // Get\r\n    let prefix = \"_optionbox\";\r\n    let storageExists = get.storageExists();\r\n    let config = get.config(userConfig);\r\n    let storedValues = get.storedValues(storageExists, config.persist, prefix);\r\n    let selectElements = get.selectElements(config.select);\r\n    // Create\r\n    let optionboxes = create.optionboxes(selectElements, storedValues, prefix);\r\n    console.log(`boxes: ${optionboxes}`);\r\n    // Updates\r\n};"],"names":["get","userConfig","Object","assign","undefined","Storage","storageExists","persist","prefix","sessionStorage","getItem","selector","elements","document","querySelectorAll","selects","length","forEach","call","element","tagName","push","console","warn","toLowerCase","create","selectElements","storedValues","optionboxElements","optionbox","createElement","name","select","storedValue","id","classList","add","innerHTML","_this","options","insertAdjacentElement","selectedIndex","hidden","optionElements","content","selected","_this2","preselected","option","alt","getAttribute","value","hasAttribute","window","config","optionboxes","log"],"mappings":"yOAAMA,WACKC,UAMgBC,OAAOC,OALJ,UACT,SACD,UAGoCF,IAPlDD,yBAayBI,yBAAZC,sBAAAA,WAbbL,WAoBWM,EAAeC,EAASC,UAC7BF,GAAiBC,EACVE,eAAeC,QAAQF,GAG3B,IAzBTR,WA4BaW,OACPC,EAAWC,SAASC,iBAAiBH,GACrCI,EAAU,UAEVH,EAASI,WACNC,QAAQC,KAAKN,EAAU,YACE,WAApBO,EAAQC,UACAC,KAAKF,GAEbG,QAAQC,KACJ,iDACAJ,EAAQC,QAAQI,cAChB,gEAKTT,GC7CTU,EAAS,sBACCC,EAAgBC,EAAcnB,cAClCoB,EAAoB,YAETX,QAAQ,gBACfY,EAAYhB,SAASiB,cAAc,QACnCC,EAAOC,EAAOD,KACdE,EAAc,GAEdN,MACcA,EAAaI,MAGrBG,GAAKH,EAAOvB,IACZ2B,UAAUC,IAAI5B,KACd6B,UAAYC,EAAKC,QAAQP,EAAOlB,iBAAiB,UAAWiB,EAAME,EAAazB,KAClFgC,sBAAsB,cAAeX,KACrCY,eAAiB,IACjBC,QAAS,IAEErB,KAAKQ,KAGnBD,oBAGJe,EAAgBZ,EAAME,EAAazB,cACnCoC,EAAU,YAEX3B,QAAQC,KAAKyB,EAAgB,gBACxBE,EAAWC,EAAKC,YAAYd,EAAae,GACzCC,EAAMD,EAAOE,aAAa,iDAGN1C,+GAGHA,6CACDuB,EAAOvB,yCACNwC,EAAOG,MAAQ3C,0CACbqC,iCACTG,EAAOX,UAEjBY,wBAC4BzC,WAAeyC,iBAGpC,aAGRL,wBAGCX,EAAae,UACjBf,IAAgBe,EAAOG,SAEflB,IAAee,EAAOI,aAAa,eCrDvDC,OAAOxB,UAAY,SAAC5B,OAEZO,EAAS,aACTF,EAAgBN,IAChBsD,EAAStD,EAAWC,GACpB0B,EAAe3B,EAAiBM,EAAegD,EAAO/C,QAASC,GAC/DkB,EAAiB1B,EAAmBsD,EAAOtB,QAE3CuB,EAAc9B,EAAO8B,YAAY7B,EAAgBC,EAAcnB,WAC3DgD,cAAcD"}