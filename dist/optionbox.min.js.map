{"version":3,"file":"optionbox.min.js","sources":["../src/modules/persist.js","../src/modules/update.js","../src/modules/load.js","../src/main.js"],"sourcesContent":["const persist = {\r\n    storageExists: typeof (Storage) !== \"undefined\" ? true : false,\r\n\r\n    key(name) {\r\n        return \"optionbox-\" + name;\r\n    },\r\n\r\n    store(name, value) {\r\n        if (this.storageExists) {\r\n            sessionStorage.setItem(this.key(name), value);\r\n        }\r\n    },\r\n\r\n    remove(name) {\r\n        if (this.storageExists) {\r\n            sessionStorage.removeItem(this.key(name));\r\n        }\r\n    },\r\n\r\n    get(name) {\r\n        if (this.storageExists) {\r\n            return sessionStorage.getItem(this.key(name));\r\n        }\r\n    }\r\n};\r\n\r\nexport { persist };","import { persist } from \"./persist\";\r\n\r\nconst update = {\r\n    listen(radios) {\r\n        [].forEach.call(radios, radio => {\r\n            radio.onclick = () => {\r\n                this.change(radio);\r\n            };\r\n        });\r\n    },\r\n\r\n    change(radio) {\r\n        let name = radio.dataset.optionboxName;\r\n        let value = radio.dataset.optionboxValue;\r\n        let optionItem = radio.closest(\".optionbox-item\");\r\n        let optionBox = radio.closest(\".optionbox\");\r\n        let optionSiblings = optionBox.querySelectorAll(\r\n            \".optionbox-radio:not(:checked)\"\r\n        );\r\n\r\n        let select = document.querySelector(`[name=${name}]`);\r\n\r\n        if (select.value != value) {\r\n            // select if not previously selected\r\n            select.value = value;\r\n            radio.checked = true;\r\n            persist.store(select.name, select.value);\r\n            this.close(optionItem, optionBox, optionSiblings);\r\n        } else {\r\n            // deselect if previously selected\r\n            select.selectedIndex = -1;\r\n            radio.checked = false;\r\n            persist.remove(select.name);\r\n            this.open(optionItem, optionBox);\r\n        }\r\n    },\r\n\r\n    close(optionItem, optionBox, optionSiblings) {\r\n        optionItem.classList.add(\"selected\");\r\n        optionBox.classList.add(\"closed\");\r\n        [].forEach.call(optionSiblings, sibling =>\r\n            sibling.closest(\"label\").classList.remove(\"selected\")\r\n        );\r\n    },\r\n\r\n    open(optionItem, optionBox) {\r\n        optionItem.classList.remove(\"selected\");\r\n        optionBox.classList.remove(\"closed\");\r\n    }\r\n};\r\n\r\nexport { update };","import { update } from \"./update\";\r\nimport { persist } from \"./persist\";\r\n\r\nconst load = {\r\n    init(selector) {\r\n        let elements = selector\r\n            ? document.querySelectorAll(selector)\r\n            : document.querySelectorAll(\"select\");\r\n        let selects = [];\r\n        if (elements.length) {\r\n            [].forEach.call(elements, element => {\r\n                if (element.tagName == \"SELECT\") {\r\n                    selects.push(element);\r\n                } else\r\n                    console.warn(\r\n                        \"Optionbox warning: Your selection includes a <\" +\r\n                        element.tagName.toLowerCase() +\r\n                        \">. Only <select> elements can be converted to an optionbox\"\r\n                    );\r\n            });\r\n            this.create(selects);\r\n            update.listen(document.querySelectorAll(\".optionbox-radio\"));\r\n            this.clickAllSelected();\r\n        }\r\n    },\r\n\r\n    create(selects) {\r\n        selects.forEach(select => {\r\n            let optionsBox = document.createElement(\"span\");\r\n            let storedValue = persist.get(select.name);\r\n\r\n            optionsBox.classList.add(\"optionbox\");\r\n            optionsBox.innerHTML = this.replicate(\r\n                select.querySelectorAll(\"option\"),\r\n                select.name,\r\n                storedValue\r\n            );\r\n\r\n            select.insertAdjacentElement(\"beforebegin\", optionsBox);\r\n\r\n            select.selectedIndex = -1;\r\n            select.hidden = true;\r\n        });\r\n    },\r\n\r\n    replicate(options, name, storedValue) {\r\n        let content = \"\";\r\n\r\n        [].forEach.call(options, option => {\r\n            let selected = false;\r\n            if (storedValue === option.value) {\r\n                selected = true;\r\n            } else if (!storedValue && option.hasAttribute(\"selected\")) {\r\n                selected = true;\r\n            }\r\n\r\n            content += `\r\n                <label class=\"optionbox-item\">\r\n                <input\r\n                    type=\"radio\"\r\n                    class=\"optionbox-radio\"\r\n                    name=\"${name}-options\"\r\n                    data-optionbox-name=\"${name}\"\r\n                    data-optionbox-value=\"${option.value}\"\r\n                    checked=\"${selected}\">\r\n                ${option.innerHTML}\r\n                </label>`;\r\n        });\r\n\r\n        return content;\r\n    },\r\n\r\n    clickAllSelected() {\r\n        let checked = document.querySelectorAll(\r\n            \".optionbox-radio[checked=true]\"\r\n        );\r\n\r\n        [].forEach.call(checked, radio => {\r\n            radio.click();\r\n        });\r\n    }\r\n};\r\n\r\nexport { load };\r\n","import { load } from \"./modules/load\";\r\nload.init();\r\n"],"names":["persist","Storage","name","value","this","storageExists","setItem","key","removeItem","sessionStorage","getItem","update","radios","forEach","call","onclick","change","radio","dataset","optionboxName","optionboxValue","optionItem","closest","optionBox","optionSiblings","querySelectorAll","select","document","querySelector","checked","store","close","selectedIndex","remove","open","classList","add","sibling","selector","elements","selects","length","element","tagName","push","console","warn","toLowerCase","create","listen","clickAllSelected","optionsBox","createElement","storedValue","get","innerHTML","_this","replicate","insertAdjacentElement","hidden","options","content","selected","option","hasAttribute","click","init"],"mappings":"yBAAA,IAAMA,EAAU,eACwB,oBAAbC,qBAEnBC,SACO,aAAeA,kBAGpBA,EAAMC,GACJC,KAAKC,8BACUC,QAAQF,KAAKG,IAAIL,GAAOC,oBAIxCD,GACCE,KAAKC,8BACUG,WAAWJ,KAAKG,IAAIL,kBAIvCA,MACIE,KAAKC,qBACEI,eAAeC,QAAQN,KAAKG,IAAIL,MCnB7CS,EAAS,iBACJC,iBACAC,QAAQC,KAAKF,EAAQ,cACdG,QAAU,aACPC,OAAOC,uBAKjBA,OACCf,EAAOe,EAAMC,QAAQC,cACrBhB,EAAQc,EAAMC,QAAQE,eACtBC,EAAaJ,EAAMK,QAAQ,mBAC3BC,EAAYN,EAAMK,QAAQ,cAC1BE,EAAiBD,EAAUE,iBAC3B,kCAGAC,EAASC,SAASC,uBAAuB1B,OAEzCwB,EAAOvB,OAASA,KAETA,MAAQA,IACT0B,SAAU,IACRC,MAAMJ,EAAOxB,KAAMwB,EAAOvB,YAC7B4B,MAAMV,EAAYE,EAAWC,OAG3BQ,eAAiB,IAClBH,SAAU,IACRI,OAAOP,EAAOxB,WACjBgC,KAAKb,EAAYE,oBAIxBF,EAAYE,EAAWC,KACdW,UAAUC,IAAI,cACfD,UAAUC,IAAI,aACrBvB,QAAQC,KAAKU,EAAgB,mBAC5Ba,EAAQf,QAAQ,SAASa,UAAUF,OAAO,6BAI7CZ,EAAYE,KACFY,UAAUF,OAAO,cAClBE,UAAUF,OAAO,aC5CtB,eACJK,OACGC,EAAWD,EACTX,SAASF,iBAAiBa,GAC1BX,SAASF,iBAAiB,UAC5Be,EAAU,GACVD,EAASE,YACN5B,QAAQC,KAAKyB,EAAU,YACC,UAAnBG,EAAQC,UACAC,KAAKF,GAEbG,QAAQC,KACJ,iDACAJ,EAAQC,QAAQI,cAChB,qEAGPC,OAAOR,KACLS,OAAOtB,SAASF,iBAAiB,0BACnCyB,qCAINV,gBACK3B,QAAQ,gBACRsC,EAAaxB,SAASyB,cAAc,QACpCC,EAAcrD,EAAQsD,IAAI5B,EAAOxB,QAE1BiC,UAAUC,IAAI,eACdmB,UAAYC,EAAKC,UACxB/B,EAAOD,iBAAiB,UACxBC,EAAOxB,KACPmD,KAGGK,sBAAsB,cAAeP,KAErCnB,eAAiB,IACjB2B,QAAS,wBAIdC,EAAS1D,EAAMmD,OACjBQ,EAAU,YAEXhD,QAAQC,KAAK8C,EAAS,gBACjBE,GAAW,EACXT,IAAgBU,EAAO5D,SACZ,GACHkD,GAAeU,EAAOC,aAAa,iBAChC,4LAQC9D,yDACeA,kDACC6D,EAAO5D,yCACpB2D,yBACbC,EAAOR,yCAIVM,mCAIHhC,EAAUF,SAASF,iBACnB,qCAGDZ,QAAQC,KAAKe,EAAS,cACfoC,aC7EbC"}